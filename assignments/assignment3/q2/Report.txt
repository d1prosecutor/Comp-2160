Set1.o
	The are_Equal method is incorrect (It reports that some (2) sets are not equal when they in fact are equal)
		Error with same set (twice), sets sontaining same elements, 2 empty sets
	The are_Disjoint method is incorrect (It reports that some (2) sets are not disjoint when they in fact are disjoint)
		Error with a non-empty and an empty set, 2 empty sets, two disjointed non empty sets.
	The union method is incorrect (the result of the method differs from what should be the union of the sets)
		Because the are_Equal method is incorrect and I tested the union method using the are_Equal method which contains errors
	The symmetric difference method is incorrect (the result of the method differs from what should be the symmetric difference of the sets)
		Because the are_Equal method is incorrect and I tested the symmetric difference method using the are_Equal method which contains errors
		
Set2.o
	The insert method is incorrect (inserts an item even when the item already exists in the set)
		Error with inserting 1,2,3,4,5 in a set already containing those numbers
	The remove method is incorrect (does not find the item to be removed from the set when that item is in fact in the set)
		Error with removing 1 and 3 from a set which should be containing 1,2,3,4,5
	The are_Equal method is incorrect (It reports that some (2) sets are not equal when they in fact are equal, it only compares pointers) 
		(!!! it only reports that 2 sets are equal when they are the exact same set(same pointer), or they are both empty)
			Error with sets containing same elements
	
	//Cant really say if these methods work well because i can only test them using are_Equal method which tests for just equality of memory address
	//So my test methods are checking if the returned results(sets)from the union and symmetric difference methods have the same memory address as the expected result(set)i passed in
		The union method is incorrect (the result of the method differs from what should be the union of the sets)
			(!!! it only reports that the union of a set with itself is itself(in pointers), IT WORKS FOR EMPTY SETS THOUGH)
				Because the are_Equal method is incorrect and I tested the union method using the are_Equal method which tests for memory address
		The symmetric difference method is incorrect (the result of the method differs from what should be the symmetric difference of the sets)
			(!!! it only reports correctly when the returned result(symmetric difference set) is the empty set, OR WHEN ONE OF THE PASSED IN SETS IS EMPTY)
				Because the are_Equal method is incorrect and I tested the symmetric difference method using the are_Equal method which tests for memory address
				
Set3.o
	The are_Disjoint method is incorrect (It reports that some (2) sets are not disjoint when they in fact are disjoint)
		Error with a non-empty and an empty set, two disjointed non empty sets.
	The symmetric difference method is incorrect (the result of the method differs from what should be the symmetric difference of the sets)
		Error with cases where the two sets are non-empty